rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() { return request.auth != null; }

    // Role helpers (no dynamic path concatenation)
    function isCustomer() { return exists(/databases/$(database)/documents/customers/$(request.auth.uid)); }
    function isCompany() { return exists(/databases/$(database)/documents/companies/$(request.auth.uid)); }
    function canCreateCustomer() { return !isCompany(); }
    function canCreateCompany() { return !isCustomer(); }

    // === CUSTOMERS COLLECTION ===
    match /customers/{customerId} {
      allow read: if isSignedIn() && request.auth.uid == customerId;
      allow create: if isSignedIn() && request.auth.uid == customerId && canCreateCustomer();
      allow update: if isSignedIn() && request.auth.uid == customerId;
      allow delete: if false; // Prevent deletion
    }

    // === COMPANIES COLLECTION ===
    match /companies/{companyId} {
      allow read: if isSignedIn() && request.auth.uid == companyId;
      allow create: if isSignedIn() && request.auth.uid == companyId && canCreateCompany();
      allow update: if isSignedIn() && request.auth.uid == companyId;
      allow delete: if false; // Prevent deletion

      // Company notifications subcollection
      match /notifications/{notificationId} {
        allow read: if isSignedIn() && request.auth.uid == companyId;
        allow write: if false; // Created by server or Cloud Functions
      }
    }

    // === REQUESTS COLLECTION ===
    match /requests/{requestId} {
      // Customers can read their own requests; companies can read active (non-archived) requests
      allow read: if isSignedIn() && (
        resource.data.customerId == request.auth.uid ||
        (isCompany() && !(resource.data.archived == true))
      );

      // Only customers can create requests
      allow create: if isSignedIn() && isCustomer() && request.resource.data.customerId == request.auth.uid;

      // Only request owner can update their request
      allow update: if isSignedIn() && resource.data.customerId == request.auth.uid;

      // No hard deletes (use archived flag instead)
      allow delete: if false;

      // === OFFERS SUBCOLLECTION ===
      match /offers/{offerId} {
        // Request owner and offer company can read
        allow read: if isSignedIn() && (
          resource.data.companyId == request.auth.uid ||
          get(/databases/$(database)/documents/requests/$(requestId)).data.customerId == request.auth.uid
        );

        // Only companies can create offers for requests
        allow create: if isSignedIn() && isCompany() && request.resource.data.companyId == request.auth.uid;

        // Company can update their own offers, customer can update status (accept/decline)
        allow update: if isSignedIn() && (
          resource.data.companyId == request.auth.uid ||
          get(/databases/$(database)/documents/requests/$(requestId)).data.customerId == request.auth.uid
        );

        // No deletion
        allow delete: if false;
      }
    }

    // === UPLOAD TOKENS COLLECTION ===
    match /uploadTokens/{tokenId} {
      // Tokens are readable by system only (API routes with admin SDK)
      allow read: if false;
      allow write: if false;
    }

    // Deny everything else by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}