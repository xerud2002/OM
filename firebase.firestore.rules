rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(uid) {
      return isSignedIn() && request.auth.uid == uid;
    }
    
    function isRequestOwner(requestId) {
      return isSignedIn() && 
             get(/databases/(database)/documents/requests/$(requestId)).data.customerId == request.auth.uid;
    }
    
    // Anti dual-role: prevent a user from being both customer and company
    function userHasRole(role) {
      return exists(/databases/(database)/documents/$(role + 's')/$(request.auth.uid));
    }
    
    function canCreateRole(role) {
      let oppositeRole = role == 'customer' ? 'company' : 'customer';
      return !exists(/databases/(database)/documents/$(oppositeRole + 's')/$(request.auth.uid));
    }
    
    // === CUSTOMERS COLLECTION ===
    match /customers/{customerId} {
      allow read: if isOwner(customerId);
      allow create: if isOwner(customerId) && canCreateRole('customer');
      allow update: if isOwner(customerId);
      allow delete: if false; // Prevent deletion
    }
    
    // === COMPANIES COLLECTION ===
    match /companies/{companyId} {
      allow read: if isOwner(companyId);
      allow create: if isOwner(companyId) && canCreateRole('company');
      allow update: if isOwner(companyId);
      allow delete: if false; // Prevent deletion
      
      // Company notifications subcollection
      match /notifications/{notificationId} {
        allow read: if isOwner(companyId);
        allow write: if true; // Allow system to create notifications
      }
    }
    
    // === REQUESTS COLLECTION ===
    match /requests/{requestId} {
      // Customers can read their own requests
      // Companies can read active (non-archived) requests
      allow read: if isRequestOwner(requestId) || 
                     (userHasRole('company') && 
                      (!resource.data.keys().hasAll(['archived']) || resource.data.archived == false));
      
      // Only customers can create requests
      allow create: if isSignedIn() && 
                       userHasRole('customer') && 
                       request.resource.data.customerId == request.auth.uid;
      
      // Only request owner can update their request
      allow update: if isRequestOwner(requestId);
      
      // No hard deletes (use archived flag instead)
      allow delete: if false;
      
      // === OFFERS SUBCOLLECTION ===
      match /offers/{offerId} {
        // Request owner and offer company can read
        allow read: if isRequestOwner(requestId) || 
                       (isSignedIn() && resource.data.companyId == request.auth.uid);
        
        // Only companies can create offers for requests
        allow create: if isSignedIn() && 
                         userHasRole('company') && 
                         request.resource.data.companyId == request.auth.uid;
        
        // Company can update their own offers, customer can update status (accept/decline)
        allow update: if (isSignedIn() && resource.data.companyId == request.auth.uid) ||
                         isRequestOwner(requestId);
        
        // No deletion
        allow delete: if false;
      }
    }
    
    // === UPLOAD TOKENS COLLECTION ===
    match /uploadTokens/{tokenId} {
      // Tokens are readable by system only (API routes with admin SDK)
      allow read: if false;
      allow write: if false;
    }
    
    // === REVIEWS COLLECTION (if you add this feature) ===
    match /reviews/{reviewId} {
      allow read: if true; // Public reviews
      allow create: if isSignedIn() && 
                       userHasRole('customer') && 
                       request.resource.data.customerId == request.auth.uid;
      allow update: if isOwner(resource.data.customerId);
      allow delete: if false;
    }
    
    // Deny everything else by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}